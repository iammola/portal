{
	"API template": {
		"prefix": "api-template",
		"scope": "typescript,typescriptreact",
		"body": [
			"import { ReasonPhrases, StatusCodes } from \"http-status-codes\";",
			"",
			"import { connect } from \"db\";",
			"import { formatApiError } from \"utils/api\";",
			"",
			"import type { $1Data } from \"$2\";",
			"import type { ApiInternal, ApiInternalResponse } from \"types/api\";",
			"import type { NextApiRequest, NextApiResponse } from \"next\";",
			"",
			"type Return = ApiInternalResponse<$1Data>;",
			"",
			"async function $3(${4:param}: ${5:type}) {",
			"  let [result, statusCode]: ApiInternal<$1Data> = [\"\", 0];",
			"",
			"  await connect();$0",
			"  return [result, statusCode] as const;",
			"}",
			"",
			"export default async function handler({ method = \"\" }: NextApiRequest, res: NextApiResponse<Return[0]>) {",
			"  const allow = [\"${6|GET,POST,PUT,PATCH,DELETE|}\"];",
			"  let [result, statusCode]: Return = [{",
			"    success: false,",
			"    error: ReasonPhrases.METHOD_NOT_ALLOWED,",
			"    message: ReasonPhrases.METHOD_NOT_ALLOWED",
			"  }, StatusCodes.METHOD_NOT_ALLOWED];",
			"",
			"  try {",
			"    if (method === \"${6|GET,POST,PUT,PATCH,DELETE|}\") [result, statusCode] = await $3();",
			"  } catch (error: any) {",
			"    [result, statusCode] = [{",
			"      success: false,",
			"      error: formatApiError(error),",
			"      message: ReasonPhrases.BAD_REQUEST,",
			"    }, StatusCodes.BAD_REQUEST];",
			"  }",
			"",
			"  res.setHeader(\"Allow\", allow).status(statusCode).json(result);",
			"}",
			"",
		]
	}
}