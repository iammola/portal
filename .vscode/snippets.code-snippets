{
	"API template": {
		"prefix": "api-template",
		"scope": "typescript,typescriptreact",
		"body": [
			"import { ReasonPhrases, StatusCodes } from \"http-status-codes\";",
			"",
			"import { connect } from \"db\";",
			"",
			"import type { $1Data, $1Error } from \"$2\";",
			"import type { ApiInternal, ApiInternalResponse } from \"types/api\";",
			"import type { NextApiRequest, NextApiResponse } from \"next\";",
			"",
			"type Return = ApiInternalResponse<$1Data, $1Error>;",
			"",
			"async function $3(${4:param}: ${5:type}) {",
			"    let [result, statusCode]: ApiInternal<$1Data, $1Error> = [\"\", 0];",
			"",
			"    try {",
			"        await connect();",
			"        $0",
			"        [result, statusCode] = [{",
			"            data: \"\",",
			"            success: true,",
			"            message: ReasonPhrases.OK,",
			"        }, StatusCodes.OK];",
			"    } catch (error: any) {",
			"        [result, statusCode] = [{",
			"            success: false,",
			"            message: ReasonPhrases.BAD_REQUEST,",
			"            error: (error as { message: string }).message,",
			"        }, StatusCodes.BAD_REQUEST];",
			"    }",
			"",
			"    return [result, statusCode] as const;",
			"}",
			"",
			"export default async function handler({ method = \"\" }: NextApiRequest, res: NextApiResponse<Return[0]>) {",
			"    const allow = [\"${6:GET}\"];",
			"    let [result, statusCode]: Return = [{",
			"        success: false,",
			"        error: ReasonPhrases.METHOD_NOT_ALLOWED,",
			"        message: ReasonPhrases.METHOD_NOT_ALLOWED",
			"    }, StatusCodes.METHOD_NOT_ALLOWED];",
			"",
			"    if (method === \"${6:GET}\") [result, statusCode] = await $3();",
			"",
			"    res.setHeader(\"Allow\", allow).status(statusCode).json(result);",
			"}",
			"",
		]
	}
}